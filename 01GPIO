# 01STM32强化篇-基于野火指南者

## 1)GPIO：输出模式：推挽输出、开漏输出

*解释：

###### 推挽输出：

在强推挽模式下，GPIO引脚可以驱动输出高电平或者低电平。这种模式下，引脚输出的驱动能力较强，因此称为“强推挽”。

- 高电平输出：当引脚设置为输出高电平时，内部电路将引脚连接到电源电压（Vcc），引脚输出高电平。
- 低电平输出：当引脚设置为输出低电平时，内部电路将引脚连接到地（GND），引脚输出低电平。

应用场景：

输出能力强：可以直接驱动较大电流负载。

可以驱动高电平和低电平：适用于需要明确电平的应用场景

###### 开漏输出：

低电平（0）： 当内部开关（通常是MOSFET）关闭时，引脚被拉到地电平，输出低电平。

高阻态（高阻抗）： 当内部开关打开时，引脚处于高阻态，即引脚不主动驱动任何电平。在高阻态下，引脚相当于断开，不输出任何电平。

由于在高阻态下引脚不主动驱动电平，需要一个外部上拉电阻将引脚拉到高电平。上拉电阻连接在引脚和电源（通常是Vcc）之间，当引脚处于高阻态时，通过上拉电阻将引脚拉到高电平。

应用场景：

1. **I2C通信**：
   I2C总线是一个双向的、半双工的通信总线，数据线（SDA）和时钟线（SCL）都需要开漏模式。因为I2C总线上的多个设备可以同时驱动总线，所以需要开漏模式来避免短路。
2. **多设备共用一个数据线**：
   当需要多个设备共享一根数据线时，开漏模式是很好的选择。所有设备的开漏输出连接在一起，通过上拉电阻拉高电平。任何一个设备可以将总线拉低而不会影响其他设备。
3. **外部中断**：
   开漏模式可以用在外部中断线上，尤其是多个中断源共享同一个中断线的情况下。每个中断源都可以独立地将中断线拉低，触发中断。
4. **LED驱动**：
   一些情况下，用开漏模式驱动LED是很方便的。因为开漏模式可以直接控制电流的通断，LED的阴极接地，阳极通过限流电阻接到GPIO引脚。

###### 代码示例：

硬件接法：

![1737772386286](C:\Users\Johnson_Lan\Documents\WeChat Files\wxid_fcx7unqljx8h22\FileStorage\Temp\1737772386286.png)

```c
typedef struct{
    GPIO_TypeDef* GPIO_Port;
    uint8_t GPIO_Pin;    
}LED_TypeDef;

LED_TypeDef LEDs[]= {
    
    {LED_G_GPIO_Port, LED_G_Pin},
    {LED_B_GPIO_Port, LED_B_Pin},
    {LED_R_GPIO_Port, LED_R_Pin}    

};
#define LED_COUNT (sizeof(LEDs) / sizeof(LED_TypeDef))

  while (1)
  {
    /* USER CODE END WHILE */
        
        for (int i = 0; i < LED_COUNT; i++) {
           
            HAL_GPIO_WritePin(LEDs[i].GPIO_Port, LEDs[i].GPIO_Pin, GPIO_PIN_RESET);
            HAL_Delay(500); 

            
            HAL_GPIO_WritePin(LEDs[i].GPIO_Port, LEDs[i].GPIO_Pin, GPIO_PIN_SET);
                      HAL_Delay(500); 

        }
    /* USER CODE BEGIN 3 */
  }
```

<!--功能解释：实现LED灯闪烁功能-->



**高优先级（如1~2）：** 时间敏感的中断（如定时器、USART）。

**中优先级（如3~4）：** 外设控制（如DMA）。

**低优先级（如5~7）：** 用户按钮或其他低优先的事件。
